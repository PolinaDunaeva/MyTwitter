1 request (GET oauth/authenticate)
Позволяет потребителю приложения использовать OAuth request_token для авторизации пользователей.

Этот метод является заменой раздела 6.2 потока аутентификации OAuth 1.0 для приложений, использующих поток аутентификации обратного вызова. Метод будет использовать текущего вошедшего пользователя в качестве учетной записи для авторизации доступа, если параметр force_login не имеет значения true.

Этот метод отличается от GET oauth / authorize тем, что если пользователь уже предоставил приложению разрешение, перенаправление произойдет без необходимости повторного утверждения приложения пользователем. Чтобы реализовать это поведение, надо включить параметр Use Sign in with Twitter в своей записи приложения.

Параметры:
Имя - описание.
force_login - Заставляет пользователя ввести свои учетные данные, чтобы убедиться, что правильная учетная запись пользователя авторизована.
screen_name - Предварительно заполняет поле ввода имени пользователя экрана входа OAuth заданным значением.

2 request (GET oauth/authorize)
Позволяет приложению- потребителю использовать OAuth Request Token для запроса авторизации пользователя. Этот метод выполняет раздел 6.2 потока аутентификации OAuth 1.0. Desktop приложения должны использовать этот метод (и не могут использовать GET oauth / authenticate).

Параметры: 
такие же, как и у GET oauth/authenticate

3 request (POST oauth2/token)
Позволяет зарегистрированному приложению получить токен носителя(Bearer Token) OAuth 2, который может использоваться для выполнения запросов API от имени приложения без пользовательского контекста. Это называется Application-only authentication.

Токен носителя может быть признан недействительным с помощью oauth2 / invalidate_token. После того, как маркер носителя был признан недействительным, новые попытки создания дадут другой маркер носителя, и использование предыдущего маркера больше не будет разрешено.

Для приложения может существовать только один токен на предъявителя, и повторные запросы к этому методу приведут к тому же самому уже существующему токену, пока он не будет признан недействительным.

Токены, полученные этим методом, должны быть кэшированы. При слишком частых попытках запросы будут отклоняться с помощью HTTP 403 с кодом 99.